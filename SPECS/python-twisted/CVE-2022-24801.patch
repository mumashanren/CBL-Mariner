From e5538d2a5491b30e1f2f6d7f9e1422d2a2b607df Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Sat, 5 Mar 2022 23:26:55 -0800
Subject: [PATCH 1/9] Some tests for GHSA-c2jg-hw38-jrqq

---
 src/twisted/web/test/test_http.py | 102 ++++++++++++++++++++++++++++++
 1 file changed, 102 insertions(+)

diff --git a/src/twisted/web/test/test_http.py b/src/twisted/web/test/test_http.py
index a3067f7..3e17b8d 100644
--- a/src/twisted/web/test/test_http.py
+++ b/src/twisted/web/test/test_http.py
@@ -1695,6 +1695,56 @@ class ParsingTests(unittest.TestCase):
         )
 
 
+    def test_headerStripWhitespace(self):
+        """
+        Leading and trailing space and tab characters are stripped from
+        headers. Other forms of whitespace are preserved.
+
+        See RFC 7230 section 3.2.3 and 3.2.4.
+        """
+        processed = []
+
+        class MyRequest(http.Request):
+            def process(self):
+                processed.append(self)
+                self.finish()
+
+        requestLines = [
+            b"GET / HTTP/1.0",
+            b"spaces:   spaces were stripped   ",
+            b"tabs: \t\ttabs were stripped\t\t",
+            b"spaces-and-tabs: \t \t spaces and tabs were stripped\t \t",
+            b"line-tab:   \v vertical tab was preserved\v\t",
+            b"form-feed: \f form feed was preserved \f  ",
+            b"",
+            b"",
+        ]
+
+        self.runRequest(b"\n".join(requestLines), MyRequest, 0)
+        [request] = processed
+        # All leading and trailing whitespace is stripped from the
+        # header-value.
+        self.assertEqual(
+            request.requestHeaders.getRawHeaders(b"spaces"),
+            [b"spaces were stripped"],
+        )
+        self.assertEqual(
+            request.requestHeaders.getRawHeaders(b"tabs"),
+            [b"tabs were stripped"],
+        )
+        self.assertEqual(
+            request.requestHeaders.getRawHeaders(b"spaces-and-tabs"),
+            [b"spaces and tabs were stripped"],
+        )
+        self.assertEqual(
+            request.requestHeaders.getRawHeaders(b"line-tab"),
+            [b"\v vertical tab was preserved\v"],
+        )
+        self.assertEqual(
+            request.requestHeaders.getRawHeaders(b"form-feed"),
+            [b"\f form feed was preserved \f"],
+        )
+
     def test_tooManyHeaders(self):
         """
         C{HTTPChannel} enforces a limit of C{HTTPChannel.maxHeaders} on the
@@ -2267,6 +2317,58 @@ Hello,
         ])
 
 
+    def test_contentLengthMalformed(self):
+        """
+        A request with a non-integer C{Content-Length} header fails with a 400
+        response without calling L{Request.process}.
+        """
+        self.assertRequestRejected(
+            [
+                b"GET /a HTTP/1.1",
+                b"Content-Length: MORE THAN NINE THOUSAND!",
+                b"Host: host.invalid",
+                b"",
+                b"",
+                b"x" * 9001,
+            ]
+        )
+
+    def test_contentLengthTooPositive(self):
+        """
+        A request with a C{Content-Length} header that begins with a L{+} fails
+        with a 400 response without calling L{Request.process}.
+
+        This is a potential request smuggling vector: see GHSA-c2jg-hw38-jrqq.
+        """
+        self.assertRequestRejected(
+            [
+                b"GET /a HTTP/1.1",
+                b"Content-Length: +100",
+                b"Host: host.invalid",
+                b"",
+                b"",
+                b"x" * 100,
+            ]
+        )
+
+    def test_contentLengthNegative(self):
+        """
+        A request with a C{Content-Length} header that is negative fails with
+        a 400 response without calling L{Request.process}.
+
+        This is a potential request smuggling vector: see GHSA-c2jg-hw38-jrqq.
+        """
+        self.assertRequestRejected(
+            [
+                b"GET /a HTTP/1.1",
+                b"Content-Length: -100",
+                b"Host: host.invalid",
+                b"",
+                b"",
+                b"x" * 200,
+            ]
+        )
+
     def test_duplicateContentLengthsWithPipelinedRequests(self):
         """
         Two pipelined requests, the first of which includes multiple
-- 
2.34.1


From 0378c26e2ad96b6d7c680289faa242469d31345d Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Mon, 7 Mar 2022 00:02:55 -0800
Subject: [PATCH 2/9] Replace obs-fold with a single space

---
 src/twisted/web/http.py           |  2 +-
 src/twisted/web/test/test_http.py | 13 +++++++++----
 2 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/src/twisted/web/http.py b/src/twisted/web/http.py
index b7afa8b..090abe3 100644
--- a/src/twisted/web/http.py
+++ b/src/twisted/web/http.py
@@ -2157,7 +2157,7 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
                 self.setRawMode()
         elif line[0] in b' \t':
             # Continuation of a multi line header.
-            self.__header = self.__header + b'\n' + line
+            self.__header += b" " + line.lstrip(b" \t")
         # Regular header line.
         # Processing of header line is delayed to allow accumulating multi
         # line headers.
diff --git a/src/twisted/web/test/test_http.py b/src/twisted/web/test/test_http.py
index 3e17b8d..361fb26 100644
--- a/src/twisted/web/test/test_http.py
+++ b/src/twisted/web/test/test_http.py
@@ -1646,7 +1646,12 @@ class ParsingTests(unittest.TestCase):
         Line folded headers are handled by L{HTTPChannel} by replacing each
         fold with a single space by the time they are made available to the
         L{Request}. Any leading whitespace in the folded lines of the header
-        value is preserved.
+        value is replaced with a single space, per:
+
+            A server that receives an obs-fold in a request message ... MUST
+            ... replace each received obs-fold with one or more SP octets prior
+            to interpreting the field value or forwarding the message
+            downstream.
 
         See RFC 7230 section 3.2.4.
         """
@@ -1683,15 +1688,15 @@ class ParsingTests(unittest.TestCase):
         )
         self.assertEqual(
             request.requestHeaders.getRawHeaders(b"space"),
-            [b"space  space"],
+            [b"space space"],
         )
         self.assertEqual(
             request.requestHeaders.getRawHeaders(b"spaces"),
-            [b"spaces   spaces    spaces"],
+            [b"spaces spaces spaces"],
         )
         self.assertEqual(
             request.requestHeaders.getRawHeaders(b"tab"),
-            [b"t \ta \tb"],
+            [b"t a b"],
         )
 
 
-- 
2.34.1


From 4ab708697afb3af50ae28114191365aeefef0b08 Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Mon, 7 Mar 2022 00:03:50 -0800
Subject: [PATCH 3/9] Strip only spaces and tabs from header values

---
 src/twisted/web/http.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/twisted/web/http.py b/src/twisted/web/http.py
index 090abe3..a290eb2 100644
--- a/src/twisted/web/http.py
+++ b/src/twisted/web/http.py
@@ -2240,7 +2240,7 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
             return False
 
         header = header.lower()
-        data = data.strip()
+        data = data.strip(b" \t")
 
         if not self._maybeChooseTransferDecoder(header, data):
             return False
-- 
2.34.1


From 36514b25e4c8c478704e590195db661bfab627ed Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Mon, 7 Mar 2022 00:32:14 -0800
Subject: [PATCH 4/9] Reject non-digit Content-Length

---
 src/twisted/web/http.py | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/src/twisted/web/http.py b/src/twisted/web/http.py
index a290eb2..5f8e00c 100644
--- a/src/twisted/web/http.py
+++ b/src/twisted/web/http.py
@@ -2186,6 +2186,8 @@ class HTTPChannel(basic.LineReceiver, policies.TimeoutMixin):
 
         # Can this header determine the length?
         if header == b'content-length':
+            if not data.isdigit():
+                return fail()
             try:
                 length = int(data)
             except ValueError:
-- 
2.34.1


From 9e23238fba0ac0d23d6f0acefcff608c4cc60e42 Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Sun, 13 Mar 2022 23:19:39 -0700
Subject: [PATCH 5/9] Test for malformed chunk size and extensions

---
 src/twisted/web/test/test_http.py | 36 +++++++++++++++++++++++++++++++
 1 file changed, 36 insertions(+)

diff --git a/src/twisted/web/test/test_http.py b/src/twisted/web/test/test_http.py
index 361fb26..ba26f8c 100644
--- a/src/twisted/web/test/test_http.py
+++ b/src/twisted/web/test/test_http.py
@@ -1301,6 +1301,23 @@ class ChunkedTransferEncodingTests(unittest.TestCase):
         self.assertEqual(L, [b'abc'])
 
 
+    def test_extensionsMalformed(self):
+        """
+        L{_ChunkedTransferDecoder.dataReceived} raises
+        L{_MalformedChunkedDataError} when the chunk extension fields contain
+        invalid characters.
+
+        This is a potential request smuggling vector: see GHSA-c2jg-hw38-jrqq.
+        """
+        for b in [*range(0, 0x09), *range(0x10, 0x21), *range(0x74, 0x80)]:
+            data = b"3; " + bytes((b,)) + b"\r\nabc\r\n"
+            p = http._ChunkedTransferDecoder(
+                lambda b: None,  # pragma: nocov
+                lambda b: None,  # pragma: nocov
+            )
+            self.assertRaises(http._MalformedChunkedDataError, p.dataReceived, data)
+
+
     def test_finish(self):
         """
         L{_ChunkedTransferDecoder.dataReceived} interprets a zero-length
@@ -1378,6 +1395,23 @@ class ChunkedTransferEncodingTests(unittest.TestCase):
         self.assertEqual(successes, [True])
 
 
+    def test_malformedChunkSizeHex(self):
+        """
+        L{_ChunkedTransferDecoder.dataReceived} raises
+        L{_MalformedChunkedDataError} when the chunk size is prefixed with
+        "0x", as if it were a Python integer literal.
+
+        This is a potential request smuggling vector: see GHSA-c2jg-hw38-jrqq.
+        """
+        p = http._ChunkedTransferDecoder(
+            lambda b: None,  # pragma: nocov
+            lambda b: None,  # pragma: nocov
+        )
+        self.assertRaises(
+            http._MalformedChunkedDataError, p.dataReceived, b"0x3\r\nabc\r\n"
+        )
+
+
 
 class ChunkingTests(unittest.TestCase, ResponseTestMixin):
 
@@ -1389,6 +1423,8 @@ class ChunkingTests(unittest.TestCase, ResponseTestMixin):
             chunked = b''.join(http.toChunk(s))
             self.assertEqual((s, b''), http.fromChunk(chunked))
         self.assertRaises(ValueError, http.fromChunk, b'-5\r\nmalformed!\r\n')
+        self.assertRaises(ValueError, http.fromChunk, b"0xa\r\nmalformed!\r\n")
+        self.assertRaises(ValueError, http.fromChunk, b"0XA\r\nmalformed!\r\n")
 
     def testConcatenatedChunks(self):
         chunked = b''.join([b''.join(http.toChunk(t)) for t in self.strings])
-- 
2.34.1


From 344c13b7e5dc6c16de242441a9fd315f1a3adcb6 Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Sun, 13 Mar 2022 23:51:52 -0700
Subject: [PATCH 6/9] Reject malformed chunk sizes

---
 src/twisted/web/http.py           | 32 ++++++++++++++++++++++---
 src/twisted/web/test/test_http.py | 40 +++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+), 3 deletions(-)

diff --git a/src/twisted/web/http.py b/src/twisted/web/http.py
index 5f8e00c..8b3c7e3 100644
--- a/src/twisted/web/http.py
+++ b/src/twisted/web/http.py
@@ -340,7 +340,33 @@ def toChunk(data):
 
 
 
-def fromChunk(data):
+def _ishexdigits(b: bytes) -> bool:
+    """
+    Is the string case-insensitively hexidecimal?
+
+    It must be composed of one or more characters in the ranges a-f, A-F
+    and 0-9.
+    """
+    for c in b:
+        if c not in b'0123456789abcdefABCDEF':
+            return False
+    return bool(b)
+
+
+def _hexint(b: bytes) -> int:
+    """
+    Decode a hexadecimal integer.
+
+    Unlike L{int(b, 16)}, this raises L{ValueError} when the integer has
+    a prefix like C{b'0x'}, C{b'+'}, or C{b'-'}, which is desirable when
+    parsing network protocols.
+    """
+    if not _ishexdigits(b):
+        raise ValueError(b)
+    return int(b, 16)
+
+
+def fromChunk(data: bytes):
     """
     Convert chunk to string.
 
@@ -352,7 +378,7 @@ def fromChunk(data):
         byte string.
     """
     prefix, rest = data.split(b'\r\n', 1)
-    length = int(prefix, 16)
+    length = _hexint(prefix)
     if length < 0:
         raise ValueError("Chunk length must be >= 0, not %d" % (length,))
     if rest[length:length + 2] != b'\r\n':
@@ -1827,7 +1853,7 @@ class _ChunkedTransferDecoder(object):
             line, rest = data.split(b'\r\n', 1)
             parts = line.split(b';')
             try:
-                self.length = int(parts[0], 16)
+                self.length = _hexint(parts[0])
             except ValueError:
                 raise _MalformedChunkedDataError(
                     "Chunk-size must be an integer.")
diff --git a/src/twisted/web/test/test_http.py b/src/twisted/web/test/test_http.py
index ba26f8c..dbd4758 100644
--- a/src/twisted/web/test/test_http.py
+++ b/src/twisted/web/test/test_http.py
@@ -4369,3 +4369,43 @@ class HTTPClientSanitizationTests(unittest.SynchronousTestCase):
                 transport.value().splitlines(),
                 [b": ".join([sanitizedBytes, sanitizedBytes])]
             )
+
+
+class HexHelperTests(unittest.SynchronousTestCase):
+    """
+    Test the L{http._hexint} and L{http._ishexdigits} helper functions.
+    """
+
+    badStrings = (b"", b"0x1234", b"feds", b"-123" b"+123")
+
+    def test_isHex(self):
+        """
+        L{_ishexdigits()} returns L{True} for nonempy bytestrings containing
+        hexadecimal digits.
+        """
+        for s in (b"10", b"abcdef", b"AB1234", b"fed", b"123467890"):
+            self.assertIs(True, http._ishexdigits(s))
+
+    def test_decodes(self):
+        """
+        L{_hexint()} returns the integer equivalent of the input.
+        """
+        self.assertEqual(10, http._hexint(b"a"))
+        self.assertEqual(0x10, http._hexint(b"10"))
+        self.assertEqual(0xABCD123, http._hexint(b"abCD123"))
+
+    def test_isNotHex(self):
+        """
+        L{_ishexdigits()} returns L{False} for bytestrings that don't contain
+        hexadecimal digits, including the empty string.
+        """
+        for s in self.badStrings:
+            self.assertIs(False, http._ishexdigits(s))
+
+    def test_decodeNotHex(self):
+        """
+        L{_hexint()} raises L{ValueError} for bytestrings that can't
+        be decoded.
+        """
+        for s in self.badStrings:
+            self.assertRaises(ValueError, http._hexint, s)
-- 
2.34.1


From f818271d6851b6ceea5bf37d033a46e86cd9f908 Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Sun, 13 Mar 2022 23:55:26 -0700
Subject: [PATCH 7/9] We should deprecate http.fromChunk

---
 src/twisted/web/http.py | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/twisted/web/http.py b/src/twisted/web/http.py
index 8b3c7e3..8a8cc48 100644
--- a/src/twisted/web/http.py
+++ b/src/twisted/web/http.py
@@ -370,6 +370,9 @@ def fromChunk(data: bytes):
     """
     Convert chunk to string.
 
+    Note that this function is not specification compliant: it doesn't handle
+    chunk extensions.
+
     @type data: C{bytes}
 
     @return: tuple of (result, remaining) - both C{bytes}.
-- 
2.34.1


From 85e446a4b321dcb70444b7a41b5bbad25ccfe5c6 Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Sun, 27 Mar 2022 22:17:30 -0700
Subject: [PATCH 8/9] Correct chunk extension byte validation

Go back to the RFC to figure out the correct allowed ranges.
---
 src/twisted/web/http.py           | 46 ++++++++++++++++++++++++++++++-
 src/twisted/web/test/test_http.py |  8 +++++-
 2 files changed, 52 insertions(+), 2 deletions(-)

diff --git a/src/twisted/web/http.py b/src/twisted/web/http.py
index 8a8cc48..f9e8b78 100644
--- a/src/twisted/web/http.py
+++ b/src/twisted/web/http.py
@@ -348,7 +348,7 @@ def _ishexdigits(b: bytes) -> bool:
     and 0-9.
     """
     for c in b:
-        if c not in b'0123456789abcdefABCDEF':
+        if c not in b"0123456789abcdefABCDEF":
             return False
     return bool(b)
 
@@ -1804,6 +1804,46 @@ class _IdentityTransferDecoder(object):
             raise _DataLoss()
 
 
+_chunkExtChars = (
+    b"\t !\"#$%&'()*+,-./0123456789:;<=>?@"
+    b"ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`"
+    b"abcdefghijklmnopqrstuvwxyz{|}~"
+    b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f"
+    b"\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
+    b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf"
+    b"\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
+    b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf"
+    b"\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
+    b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef"
+    b"\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
+)
+"""
+Characters that are valid in a chunk extension.
+
+See RFC 7230 section 4.1.1:
+
+     chunk-ext      = *( ";" chunk-ext-name [ "=" chunk-ext-val ] )
+
+     chunk-ext-name = token
+     chunk-ext-val  = token / quoted-string
+
+Section 3.2.6:
+
+     token          = 1*tchar
+
+     tchar          = "!" / "#" / "$" / "%" / "&" / "'" / "*"
+                    / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
+                    / DIGIT / ALPHA
+                    ; any VCHAR, except delimiters
+
+     quoted-string  = DQUOTE *( qdtext / quoted-pair ) DQUOTE
+     qdtext         = HTAB / SP /%x21 / %x23-5B / %x5D-7E / obs-text
+     obs-text       = %x80-FF
+
+We don't check if chunk extensions are well-formed beyond validating that they
+don't contain characters outside this range.
+"""
+
 
 class _ChunkedTransferDecoder(object):
     """
@@ -1860,6 +1900,10 @@ class _ChunkedTransferDecoder(object):
             except ValueError:
                 raise _MalformedChunkedDataError(
                     "Chunk-size must be an integer.")
+            if len(parts) > 1 and parts[1].translate(None, _chunkExtChars) != b"":
+                raise _MalformedChunkedDataError(
+                    f"Invalid characters in chunk extensions: {parts[1]!r}."
+                )
             if self.length == 0:
                 self.state = 'TRAILER'
             else:
diff --git a/src/twisted/web/test/test_http.py b/src/twisted/web/test/test_http.py
index dbd4758..9db48ec 100644
--- a/src/twisted/web/test/test_http.py
+++ b/src/twisted/web/test/test_http.py
@@ -1309,7 +1309,13 @@ class ChunkedTransferEncodingTests(unittest.TestCase):
 
         This is a potential request smuggling vector: see GHSA-c2jg-hw38-jrqq.
         """
-        for b in [*range(0, 0x09), *range(0x10, 0x21), *range(0x74, 0x80)]:
+        invalidControl = (
+            b"\x00\x01\x02\x03\x04\x05\x06\x07\x08\n\x0b\x0c\r\x0e\x0f"
+            b"\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
+        )
+        invalidDelimiter = b"\\"
+        invalidDel = b"\x7f"
+        for b in invalidControl + invalidDelimiter + invalidDel:
             data = b"3; " + bytes((b,)) + b"\r\nabc\r\n"
             p = http._ChunkedTransferDecoder(
                 lambda b: None,  # pragma: nocov
-- 
2.34.1


From 596318cc3b0584e62688f2f4cc9583d812a3a8af Mon Sep 17 00:00:00 2001
From: Tom Most <twm@freecog.net>
Date: Fri, 1 Apr 2022 20:47:59 -0700
Subject: [PATCH 9/9] Address review feedback

---
 src/twisted/web/http.py | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/twisted/web/http.py b/src/twisted/web/http.py
index f9e8b78..db8bf08 100644
--- a/src/twisted/web/http.py
+++ b/src/twisted/web/http.py
@@ -350,7 +350,7 @@ def _ishexdigits(b: bytes) -> bool:
     for c in b:
         if c not in b"0123456789abcdefABCDEF":
             return False
-    return bool(b)
+    return b != b""
 
 
 def _hexint(b: bytes) -> int:
@@ -1820,14 +1820,14 @@ _chunkExtChars = (
 """
 Characters that are valid in a chunk extension.
 
-See RFC 7230 section 4.1.1:
+See RFC 7230 section 4.1.1::
 
      chunk-ext      = *( ";" chunk-ext-name [ "=" chunk-ext-val ] )
 
      chunk-ext-name = token
      chunk-ext-val  = token / quoted-string
 
-Section 3.2.6:
+And section 3.2.6::
 
      token          = 1*tchar
 
-- 
2.34.1


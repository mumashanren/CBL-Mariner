From b101109e42800231e5357962b123c669822997e3 Mon Sep 17 00:00:00 2001
From: Jack Ren <bjrjk@qq.com>
Date: Fri, 23 Dec 2022 23:17:25 +0800
Subject: [PATCH 1/2] Solved infinite loop problem when output.length() is
 0x1_0000_0000 exactly

 Backported by @mfrw on 2023-01-27

---
 third_party/rust/bzip2/src/mem.rs | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/third_party/rust/bzip2/src/mem.rs b/third_party/rust/bzip2/src/mem.rs
index 9a27c8c32..f8d6b592c 100644
--- a/third_party/rust/bzip2/src/mem.rs
+++ b/third_party/rust/bzip2/src/mem.rs
@@ -141,9 +141,9 @@ impl Compress {
             return Ok(Status::RunOk)
         }
         self.inner.raw.next_in = input.as_ptr() as *mut _;
-        self.inner.raw.avail_in = input.len() as c_uint;
+        self.inner.raw.avail_in = input.len().min(c_uint::MAX as usize) as c_uint;
         self.inner.raw.next_out = output.as_mut_ptr() as *mut _;
-        self.inner.raw.avail_out = output.len() as c_uint;
+        self.inner.raw.avail_out = output.len().min(c_uint::MAX as usize) as c_uint;
         unsafe {
             match ffi::BZ2_bzCompress(&mut *self.inner.raw, action as c_int) {
                 ffi::BZ_RUN_OK => Ok(Status::RunOk),
@@ -212,9 +212,9 @@ impl Decompress {
     pub fn decompress(&mut self, input: &[u8], output: &mut [u8])
                       -> Result<Status, Error> {
         self.inner.raw.next_in = input.as_ptr() as *mut _;
-        self.inner.raw.avail_in = input.len() as c_uint;
+        self.inner.raw.avail_in = input.len().min(c_uint::MAX as usize) as c_uint;
         self.inner.raw.next_out = output.as_mut_ptr() as *mut _;
-        self.inner.raw.avail_out = output.len() as c_uint;
+        self.inner.raw.avail_out = output.len().min(c_uint::MAX as usize) as c_uint;
         unsafe {
             match ffi::BZ2_bzDecompress(&mut *self.inner.raw) {
                 ffi::BZ_OK => Ok(Status::Ok),
-- 
2.39.1


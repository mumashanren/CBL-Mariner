From 86368e9cf70a0ad23cccd5ee32de847149af0c6f
Nicolas Guibourge <nicolasg@microsoft.com>, Wed Aug 24 2022, backport fix for CVE-2022-2309 to version 4.7.1

diff -ru lxml-4.7.1-orig/src/lxml/apihelpers.pxi lxml-4.7.1/src/lxml/apihelpers.pxi
--- lxml-4.7.1-orig/src/lxml/apihelpers.pxi	2021-12-13 05:54:09.000000000 -0800
+++ lxml-4.7.1/src/lxml/apihelpers.pxi	2022-08-24 06:29:05.543171609 -0700
@@ -246,9 +246,10 @@
     while c_node is not NULL and c_node.type == tree.XML_ELEMENT_NODE:
         c_ns = c_node.nsDef
         while c_ns is not NULL:
-            prefix = funicodeOrNone(c_ns.prefix)
-            if prefix not in nsmap:
-                nsmap[prefix] = funicodeOrNone(c_ns.href)
+            if c_ns.prefix or c_ns.href:
+                prefix = funicodeOrNone(c_ns.prefix)
+                if prefix not in nsmap:
+                    nsmap[prefix] = funicodeOrNone(c_ns.href)
             c_ns = c_ns.next
         c_node = c_node.parent
     return nsmap
diff -ru lxml-4.7.1-orig/src/lxml/iterparse.pxi lxml-4.7.1/src/lxml/iterparse.pxi
--- lxml-4.7.1-orig/src/lxml/iterparse.pxi	2021-12-13 05:54:09.000000000 -0800
+++ lxml-4.7.1/src/lxml/iterparse.pxi	2022-08-24 06:31:02.172112767 -0700
@@ -419,7 +419,7 @@
     count = 0
     c_ns = c_node.nsDef
     while c_ns is not NULL:
-        count += 1
+        count += (c_ns.href is not NULL)
         c_ns = c_ns.next
     return count
 
@@ -430,9 +430,10 @@
     count = 0
     c_ns = c_node.nsDef
     while c_ns is not NULL:
-        ns_tuple = (funicode(c_ns.prefix) if c_ns.prefix is not NULL else '',
-                    funicode(c_ns.href))
-        event_list.append( (u"start-ns", ns_tuple) )
-        count += 1
+        if c_ns.href:
+            ns_tuple = (funicodeOrEmpty(c_ns.prefix),
+                        funicode(c_ns.href))
+            event_list.append( (u"start-ns", ns_tuple) )
+            count += 1
         c_ns = c_ns.next
     return count
diff -ru lxml-4.7.1-orig/src/lxml/tests/test_etree.py lxml-4.7.1/src/lxml/tests/test_etree.py
--- lxml-4.7.1-orig/src/lxml/tests/test_etree.py	2021-12-13 05:54:09.000000000 -0800
+++ lxml-4.7.1/src/lxml/tests/test_etree.py	2022-08-24 06:31:51.680512002 -0700
@@ -1459,6 +1459,26 @@
             [1,2,1,4],
             counts)
 
+    def test_walk_after_parse_failure(self):
+        # This used to be an issue because libxml2 can leak empty namespaces
+        # between failed parser runs.  iterwalk() failed to handle such a tree.
+        try:
+            etree.XML('''<anot xmlns="1">''')
+        except etree.XMLSyntaxError:
+            pass
+        else:
+            assert False, "invalid input did not fail to parse"
+
+        et = etree.XML('''<root>  </root>''')
+        try:
+            ns = next(etree.iterwalk(et, events=('start-ns',)))
+        except StopIteration:
+            # This would be the expected result, because there was no namespace
+            pass
+        else:
+            # This is a bug in libxml2
+            assert not ns, repr(ns)
+
     def test_itertext_comment_pi(self):
         # https://bugs.launchpad.net/lxml/+bug/1844674
         XML = self.etree.XML

diff -ruN a/cloudinit/config/schema.py b/cloudinit/config/schema.py
--- a/cloudinit/config/schema.py	2021-11-02 12:35:08.000000000 -0700
+++ b/cloudinit/config/schema.py	2023-06-28 13:10:31.476935314 -0700
@@ -14,6 +14,8 @@
 import sys
 import yaml

+
+LOG = logging.getLogger(__name__)
 _YAML_MAP = {True: 'true', False: 'false', None: 'null'}
 SCHEMA_UNDEFINED = b'UNDEFINED'
 CLOUD_CONFIG_HEADER = b'#cloud-config'
@@ -72,7 +74,7 @@
             isinstance(instance, (bytes,)))


-def validate_cloudconfig_schema(config, schema, strict=False):
+def validate_cloudconfig_schema(config, schema, strict=False, log_details: bool = True,):
     """Validate provided config meets the schema definition.

     @param config: Dict of cloud configuration settings validated against
@@ -81,6 +83,9 @@
        for the cloud config module (config.cc_*).
     @param strict: Boolean, when True raise SchemaValidationErrors instead of
        logging warnings.
+    @param log_details: Boolean, when True logs details of validation errors.
+       If there are concerns about logging sensitive userdata, this should
+       be set to False.

     @raises: SchemaValidationError when provided config does not validate
         against the provided schema.
@@ -118,11 +123,17 @@
         errors += ((path, error.message),)
     if errors:
         if strict:
+            # This could output/log sensitive data
             raise SchemaValidationError(errors)
+        if log_details:
+            messages = ["{0}: {1}".format(k, msg) for k, msg in errors]
+            details = "\n" + "\n".join(messages)
         else:
-            messages = ['{0}: {1}'.format(k, msg) for k, msg in errors]
-            logging.warning('Invalid config:\n%s', '\n'.join(messages))
-
+            details = (
+                "Please run 'sudo cloud-init schema --system' to "
+                "see the schema errors."
+            )
+        LOG.warning("Invalid cloud-config provided: %s", details)

 def annotated_cloudconfig_file(cloudconfig, original_content, schema_errors):
     """Return contents of the cloud-config file annotated with schema errors.
Binary files a/cloudinit/__pycache__/__init__.cpython-36.pyc and b/cloudinit/__pycache__/__init__.cpython-36.pyc differ
Binary files a/cloudinit/__pycache__/version.cpython-36.pyc and b/cloudinit/__pycache__/version.cpython-36.pyc differ
diff -ruN a/tests/integration_tests/modules/test_cli.py b/tests/integration_tests/modules/test_cli.py
--- a/tests/integration_tests/modules/test_cli.py	2021-11-02 12:35:08.000000000 -0700
+++ b/tests/integration_tests/modules/test_cli.py	2023-06-28 21:13:45.841309945 -0700
@@ -20,6 +20,20 @@
 """


+# The '-' in 'hashed-password' fails schema validation
+INVALID_USER_DATA_SCHEMA = """\
+#cloud-config
+users:
+  - default
+  - name: newsuper
+    gecos: Big Stuff
+    groups: users, admin
+    sudo: ALL=(ALL) NOPASSWD:ALL
+    hashed-password: asdfasdf
+    shell: /bin/bash
+    lock_passwd: true
+"""
+
 @pytest.mark.sru_2020_11
 @pytest.mark.user_data(VALID_USER_DATA)
 def test_valid_userdata(client: IntegrationInstance):
@@ -43,3 +57,25 @@
     assert not result.ok
     assert 'Cloud config schema errors' in result.stderr
     assert 'needs to begin with "#cloud-config"' in result.stderr
+
+
+@pytest.mark.user_data(INVALID_USER_DATA_SCHEMA)
+def test_invalid_userdata_schema(client: IntegrationInstance):
+    """Test invalid schema represented as Warnings, not fatal
+    PR #1175
+    """
+    result = client.execute("cloud-init status --long")
+    assert result.ok
+    log = client.read_from_file("/var/log/cloud-init.log")
+    warning = (
+        "[WARNING]: Invalid cloud-config provided: Please run "
+        "'sudo cloud-init schema --system' to see the schema errors."
+    )
+    assert warning in log
+    assert "asdfasdf" not in log
+
+    result = client.execute("cloud-init status --long")
+    if not result.ok:
+        raise AssertionError(
+            f"Unexpected error from cloud-init status: {result}"
+        )
\ No newline at end of file
diff -ruN a/tests/unittests/test_handler/test_schema.py b/tests/unittests/test_handler/test_schema.py
--- a/tests/unittests/test_handler/test_schema.py	2021-11-02 12:35:08.000000000 -0700
+++ b/tests/unittests/test_handler/test_schema.py	2023-06-28 21:17:02.071767654 -0700
@@ -11,6 +11,7 @@
 from copy import copy
 import itertools
 import pytest
+import logging
 from pathlib import Path
 from textwrap import dedent
 from yaml import safe_load
@@ -83,10 +84,31 @@
         schema = {'properties': {'p1': {'type': 'string'}}}
         validate_cloudconfig_schema({'p1': -1}, schema, strict=False)
         self.assertIn(
-            "Invalid config:\np1: -1 is not of type 'string'\n",
+            "Invalid config: \np1: -1 is not of type 'string'\n",
             self.logs.getvalue())

     @skipUnlessJsonSchema()
+    def test_validateconfig_schema_sensitive(self, caplog):
+        """When log_details=False, ensure details are omitted"""
+        schema = {
+            "properties": {"hashed_password": {"type": "string"}},
+            "additionalProperties": False,
+        }
+        validate_cloudconfig_schema(
+            {"hashed-password": "secret"},
+            schema,
+            strict=False,
+            log_details=False,
+        )
+        [(module, log_level, log_msg)] = caplog.record_tuples
+        assert "cloudinit.config.schema" == module
+        assert logging.WARNING == log_level
+        assert (
+            "Invalid cloud-config provided: Please run 'sudo cloud-init "
+            "schema --system' to see the schema errors." == log_msg
+        )
+
+    @skipUnlessJsonSchema()
     def test_validateconfig_schema_emits_warning_on_missing_jsonschema(self):
         """Warning from validate_cloudconfig_schema when missing jsonschema."""
         schema = {'properties': {'p1': {'type': 'string'}}}
